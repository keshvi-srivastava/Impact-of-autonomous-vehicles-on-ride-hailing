package UserExamples;

import static java.lang.Math.*;
import java.util.*;
/*
 * Created on Apr 25, 2005
 *
 * Munkres-Kuhn (Hungarian) Algorithm Clean Version: 0.11
 *
 * Konstantinos A. Nedas
 * Department of Spatial Information Science & Engineering
 * University of Maine, Orono, ME 04469-5711, USA
 * kostas@spatial.maine.edu
 * http://www.spatial.maine.edu/~kostas
 *
 * This Java class implements the Hungarian algorithm [a.k.a Munkres' algorithm,
 * a.k.a. Kuhn algorithm, a.k.a. Assignment problem, a.k.a. Marriage problem,
 * a.k.a. Maximum Weighted Maximum Cardinality Bipartite Matching].
 *
 * [It can be used as a method call from within any main (or other function).]
 * It takes 2 arguments:
 * a. A 2-D array (could be rectangular or square).
 * b. A string ("min" or "max") specifying whether you want the min or max assignment.
 * [It returns an assignment matrix[array.length][2] that contains the row and col of
 * the elements (in the original inputted array) that make up the optimum assignment.]
 *
 * [This version contains only scarce comments. If you want to understand the
 * inner workings of the algorithm, get the tutorial version of the algorithm
 * from the same website you got this one (http://www.spatial.maine.edu/~kostas/dev/soft/munkres.htm)]
 *
 * Any comments, corrections, or additions would be much appreciated.
 * Credit due to professor Bob Pilgrim for providing an online copy of the
 * pseudocode for this algorithm (http://216.249.163.93/bob.pilgrim/445/munkres.html)
 *
 * Feel free to redistribute this source code, as long as this header--with
 * the exception of sections in brackets--remains as part of the file.
 *
 * Requirements: JDK 1.5.0_01 or better.
 * [Created in Eclipse 3.1M6 (www.eclipse.org).]
 *
 */


public class Hungarian {

    //********************************//
    //METHODS FOR CONSOLE INPUT-OUTPUT//
    //********************************//
    public static int readInput(String prompt) //Reads input,returns double.
    {
        Scanner in = new Scanner(System.in);
        System.out.print(prompt);
        int input = in.nextInt();
        return input;
    }

    public static void printTime(double time) //Formats time output.
    {
        String timeElapsed = "";
        int days = (int) floor(time) / (24 * 3600);
        int hours = (int) floor(time % (24 * 3600)) / (3600);
        int minutes = (int) floor((time % 3600) / 60);
        int seconds = (int) round(time % 60);

        if (days > 0) {
            timeElapsed = Integer.toString(days) + "d:";
        }
        if (hours > 0) {
            timeElapsed = timeElapsed + Integer.toString(hours) + "h:";
        }
        if (minutes > 0) {
            timeElapsed = timeElapsed + Integer.toString(minutes) + "m:";
        }

        timeElapsed = timeElapsed + Integer.toString(seconds) + "s";
        System.out.print("\nTotal time required: " + timeElapsed + "\n\n");
    }

    //*******************************************//
    //METHODS THAT PERFORM ARRAY-PROCESSING TASKS//
    //*******************************************//
    public static void generateRandomArray //Generates random 2-D array.
    (double[][] array, String randomMethod) {
        Random generator = new Random();
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (randomMethod.equals("random")) {
                    array[i][j] = generator.nextDouble();
                }
                if (randomMethod.equals("gaussian")) {
                    array[i][j] = generator.nextGaussian() / 4;		//range length to 1.
                    if (array[i][j] > 0.5) {
                        array[i][j] = 0.5;
                    }		//eliminate outliers.
                    if (array[i][j] < -0.5) {
                        array[i][j] = -0.5;
                    }	//eliminate outliers.
                    array[i][j] = array[i][j] + 0.5;				//make elements positive.
                }
            }
        }
    }

    public static double findLargest //Finds the largest element in a positive array.
    (double[][] array) //works for arrays where all values are >= 0.
    {
        double largest = 0;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                if (array[i][j] > largest) {
                    largest = array[i][j];
                }
            }
        }

        return largest;
    }

    public static double[][] transpose //Transposes a double[][] array.
    (double[][] array) {
        double[][] transposedArray = new double[array[0].length][array.length];

        for (int i = 0; i < transposedArray.length; i++) {
            for (int j = 0; j < transposedArray[i].length; j++) {
                transposedArray[i][j] = array[j][i];
            }
        }
        return transposedArray;
    }

    public static double[][] copyOf //Copies all elements of an array to a new array.
    (double[][] original) {
        double[][] copy = new double[original.length][original[0].length];
        copy = Arrays.stream(original).map(double[]::clone).toArray(double[][]::new);
        return copy;
    }

    //**********************************//
    //METHODS OF THE HUNGARIAN ALGORITHM//
    //**********************************//
    public static int[][] hgAlgorithm(double[][] array, String sumType) {
        double[][] cost = copyOf(array);	//Create the cost matrix

        if (cost.length > cost[0].length) {
            System.out.println("Array transposed (because rows>columns).\n");	//Cols must be >= Rows.
            cost = transpose(cost);
        }
        
        if (sumType.equalsIgnoreCase("max")) //Then array is weight array. Must change to cost.
        {
            double maxWeight = findLargest(cost);
            for (int i = 0; i < cost.length; i++) //Generate cost by subtracting.
            {
                for (int j = 0; j < cost[i].length; j++) {
                    cost[i][j] = (maxWeight - cost[i][j]);
                }
            }
        }
        double maxCost = findLargest(cost);		//Find largest cost matrix element (needed for step 6).

        int[][] mask = new int[cost.length][cost[0].length];	//The mask array.
        int[] rowCover = new int[cost.length];					//The row covering vector.
        int[] colCover = new int[cost[0].length];				//The column covering vector.
        int[] zero_RC = new int[2];								//Position of last zero from Step 4.
        int step = 1;
        boolean done = false;
        while (done == false) //main execution loop
        {
            switch (step) {
                case 1:
                    step = hg_step1(step, cost);
                    break;
                case 2:
                    step = hg_step2(step, cost, mask, rowCover, colCover);
                    break;
                case 3:
                    step = hg_step3(step, mask, colCover);
                    break;
                case 4:
                    step = hg_step4(step, cost, mask, rowCover, colCover, zero_RC);
                    break;
                case 5:
                    step = hg_step5(step, mask, rowCover, colCover, zero_RC);
                    break;
                case 6:
                    step = hg_step6(step, cost, rowCover, colCover, maxCost);
                    break;
                case 7:
                    done = true;
                    break;
            }
        }//end while

        int[][] assignment = new int[array.length][2];	//Create the returned array.
        for (int i = 0; i < mask.length; i++) {
            for (int j = 0; j < mask[i].length; j++) {
                if (mask[i][j] == 1) {
                    assignment[i][0] = i;
                    assignment[i][1] = j;
                }
            }
        }

        //If you want to return the min or max sum, in your own main method
        //instead of the assignment array, then use the following code:
		/*
        double sum = 0;
        for (int i=0; i<assignment.length; i++)
        {
        sum = sum + array[assignment[i][0]][assignment[i][1]];
        }
        return sum;
         */
        //Of course you must also change the header of the method to:
        //public static double hgAlgorithm (double[][] array, String sumType)

        return assignment;
    }

    public static int hg_step1(int step, double[][] cost) {
        //What STEP 1 does:
        //For each row of the cost matrix, find the smallest element
        //and subtract it from from every other element in its row.

        double minval;

        for (int i = 0; i < cost.length; i++) {
            minval = cost[i][0];
            for (int j = 0; j < cost[i].length; j++) //1st inner loop finds min val in row.
            {
                if (minval > cost[i][j]) {
                    minval = cost[i][j];
                }
            }
            for (int j = 0; j < cost[i].length; j++) //2nd inner loop subtracts it.
            {
                cost[i][j] = cost[i][j] - minval;
            }
        }

        step = 2;
        return step;
    }

    public static int hg_step2(int step, double[][] cost, int[][] mask, int[] rowCover, int[] colCover) {
        //What STEP 2 does:
        //Marks uncovered zeros as starred and covers their row and column.

        for (int i = 0; i < cost.length; i++) {
            //System.out.println("i value: " + i);
            for (int j = 0; j < cost[i].length; j++) {
                //System.out.println("j value: " + j);
                if ((cost[i][j] == 0) && (colCover[j] == 0) && (rowCover[i] == 0)) {
                    mask[i][j] = 1;
                    colCover[j] = 1;
                    rowCover[i] = 1;
                }
            }
        }

        clearCovers(rowCover, colCover);	//Reset cover vectors.

        step = 3;
        return step;
    }

    public static int hg_step3(int step, int[][] mask, int[] colCover) {
        //What STEP 3 does:
        //Cover columns of starred zeros. Check if all columns are covered.

        for (int i = 0; i < mask.length; i++) //Cover columns of starred zeros.
        {
            for (int j = 0; j < mask[i].length; j++) {
                if (mask[i][j] == 1) {
                    colCover[j] = 1;
                }
            }
        }

        int count = 0;
        for (int j = 0; j < colCover.length; j++) //Check if all columns are covered.
        {
            count = count + colCover[j];
        }

        if (count >= mask.length) //Should be cost.length but ok, because mask has same dimensions.
        {
            step = 7;
        } else {
            step = 4;
        }

        return step;
    }

    public static int hg_step4(int step, double[][] cost, int[][] mask, int[] rowCover, int[] colCover, int[] zero_RC) {
        //What STEP 4 does:
        //Find an uncovered zero in cost and prime it (if none go to step 6). Check for star in same row:
        //if yes, cover the row and uncover the star's column. Repeat until no uncovered zeros are left
        //and go to step 6. If not, save location of primed zero and go to step 5.

        int[] row_col = new int[2];	//Holds row and col of uncovered zero.
        boolean done = false;
        while (done == false) {
            row_col = findUncoveredZero(row_col, cost, rowCover, colCover);
            if (row_col[0] == -1) {
                done = true;
                step = 6;
            } else {
                mask[row_col[0]][row_col[1]] = 2;	//Prime the found uncovered zero.

                boolean starInRow = false;
                for (int j = 0; j < mask[row_col[0]].length; j++) {
                    if (mask[row_col[0]][j] == 1) //If there is a star in the same row...
                    {
                        starInRow = true;
                        row_col[1] = j;		//remember its column.
                    }
                }

                if (starInRow == true) {
                    rowCover[row_col[0]] = 1;	//Cover the star's row.
                    colCover[row_col[1]] = 0;	//Uncover its column.
                } else {
                    zero_RC[0] = row_col[0];	//Save row of primed zero.
                    zero_RC[1] = row_col[1];	//Save column of primed zero.
                    done = true;
                    step = 5;
                }
            }
        }

        return step;
    }

    public static int[] findUncoveredZero //Aux 1 for hg_step4.
    (int[] row_col, double[][] cost, int[] rowCover, int[] colCover) {
        row_col[0] = -1;	//Just a check value. Not a real index.
        row_col[1] = 0;

        int i = 0;
        boolean done = false;
        while (done == false) {
            int j = 0;
            while (j < cost[i].length) {
                if (cost[i][j] == 0 && rowCover[i] == 0 && colCover[j] == 0) {
                    row_col[0] = i;
                    row_col[1] = j;
                    done = true;
                }
                j = j + 1;
            }//end inner while
            i = i + 1;
            if (i >= cost.length) {
                done = true;
            }
        }//end outer while

        return row_col;
    }

    public static int hg_step5(int step, int[][] mask, int[] rowCover, int[] colCover, int[] zero_RC) {
        //What STEP 5 does:
        //Construct series of alternating primes and stars. Start with prime from step 4.
        //Take star in the same column. Next take prime in the same row as the star. Finish
        //at a prime with no star in its column. Unstar all stars and star the primes of the
        //series. Erasy any other primes. Reset covers. Go to step 3.

        int count = 0;												//Counts rows of the path matrix.
        int[][] path = new int[(mask[0].length * mask.length)][2];	//Path matrix (stores row and col).
        path[count][0] = zero_RC[0];								//Row of last prime.
        path[count][1] = zero_RC[1];								//Column of last prime.

        boolean done = false;
        while (done == false) {
            int r = findStarInCol(mask, path[count][1]);
            if (r >= 0) {
                count = count + 1;
                path[count][0] = r;					//Row of starred zero.
                path[count][1] = path[count - 1][1];	//Column of starred zero.
            } else {
                done = true;
            }

            if (done == false) {
                int c = findPrimeInRow(mask, path[count][0]);
                count = count + 1;
                path[count][0] = path[count - 1][0];	//Row of primed zero.
                path[count][1] = c;					//Col of primed zero.
            }
        }//end while

        convertPath(mask, path, count);
        clearCovers(rowCover, colCover);
        erasePrimes(mask);

        step = 3;
        return step;

    }

    public static int findStarInCol //Aux 1 for hg_step5.
    (int[][] mask, int col) {
        int r = -1;	//Again this is a check value.
        for (int i = 0; i < mask.length; i++) {
            if (mask[i][col] == 1) {
                r = i;
            }
        }

        return r;
    }

    public static int findPrimeInRow //Aux 2 for hg_step5.
    (int[][] mask, int row) {
        int c = -1;
        for (int j = 0; j < mask[row].length; j++) {
            if (mask[row][j] == 2) {
                c = j;
            }
        }

        return c;
    }

    public static void convertPath //Aux 3 for hg_step5.
    (int[][] mask, int[][] path, int count) {
        for (int i = 0; i <= count; i++) {
            if (mask[(path[i][0])][(path[i][1])] == 1) {
                mask[(path[i][0])][(path[i][1])] = 0;
            } else {
                mask[(path[i][0])][(path[i][1])] = 1;
            }
        }
    }

    public static void erasePrimes //Aux 4 for hg_step5.
    (int[][] mask) {
        for (int i = 0; i < mask.length; i++) {
            for (int j = 0; j < mask[i].length; j++) {
                if (mask[i][j] == 2) {
                    mask[i][j] = 0;
                }
            }
        }
    }

    public static void clearCovers //Aux 5 for hg_step5 (and not only).
    (int[] rowCover, int[] colCover) {
        for (int i = 0; i < rowCover.length; i++) {
            rowCover[i] = 0;
        }
        for (int j = 0; j < colCover.length; j++) {
            colCover[j] = 0;
        }
    }

    public static int hg_step6(int step, double[][] cost, int[] rowCover, int[] colCover, double maxCost) {
        //What STEP 6 does:
        //Find smallest uncovered value in cost: a. Add it to every element of covered rows
        //b. Subtract it from every element of uncovered columns. Go to step 4.

        double minval = findSmallest(cost, rowCover, colCover, maxCost);

        for (int i = 0; i < rowCover.length; i++) {
            for (int j = 0; j < colCover.length; j++) {
                if (rowCover[i] == 1) {
                    cost[i][j] = cost[i][j] + minval;
                }
                if (colCover[j] == 0) {
                    cost[i][j] = cost[i][j] - minval;
                }
            }
        }

        step = 4;
        return step;
    }

    public static double findSmallest //Aux 1 for hg_step6.
    (double[][] cost, int[] rowCover, int[] colCover, double maxCost) {
        double minval = maxCost;				//There cannot be a larger cost than this.
        for (int i = 0; i < cost.length; i++) //Now find the smallest uncovered value.
        {
            for (int j = 0; j < cost[i].length; j++) {
                if (rowCover[i] == 0 && colCover[j] == 0 && (minval > cost[i][j])) {
                    minval = cost[i][j];
                }
            }
        }

        return minval;
    }


    //***********//
    //MAIN METHOD//
    //***********//
    public static void main(String[] args) {
        //Below enter "max" or "min" to find maximum sum or minimum sum assignment.
        String sumType = "max";

        //Hard-coded example.
        double[][] array = {{0.17948076718068384, 0.23859477432751944, 0.2740085131125517, 0.1817964327467643, 0.33065194126757247, 0.15568880641923621, 0.22375074912339538, 0.3127335491739819, 0.1826335404065805, 0.17180477810826428, 0.26636231603793153, 0.2567436730240786, 0.2552132710607358, 0.24611982110612088, 0.17444304969374233, 0.2565520097272029, 0.1924140468255447, 0.1820824416250761, 0.28866847314825306, 0.24639262954478844, 0.1817964327467643, 0.32950462508126543, 0.21955726163349829, 0.3423725931114981, 0.20859413768492138, 0.31019112504835317, 0.32365828294712873, 0.2629034078916877, 0.24649487047056218, 0.31376322763217823, 0.2796600425493468, 0.2989459092095178, 0.2547254134009035, 0.3035945302580148, 0.25462703557452965, 0.2687477420245446, 0.19408086918897302, 0.2738338442739275, 0.32390625673358703, 0.2442569034989239, 0.22309284650115457, 0.22865875784748219 },{0.06694080638764055, 0.09992521241869595, 0.10764223098132862, 0.06794289333513978, 0.13805605979227142, 0.056653933496894744, 0.08821675641957956, 0.12424489777338654, 0.06844627132830777, 0.06324848170056578, 0.10652341087250342, 0.10413212930267628, 0.10592746586617806, 0.1026232845640372, 0.06477454523152545, 0.11006436147967515, 0.0729043525712977, 0.06748991801946218, 0.11543231230371047, 0.09747595462289778, 0.06794289333513978, 0.1427443466801274, 0.08522699582859478, 0.14681216613127515, 0.08085297911300718, 0.12174116797251092, 0.15380696226073798, 0.10820680679460237, 0.10523563759620116, 0.12981880180019337, 0.12203983105847586, 0.11919068202911554, 0.1006926914300605, 0.12447100476697186, 0.10069761529697054, 0.10939214078175181, 0.07301604198813012, 0.11200914613720908, 0.13500012989972573, 0.09779818457913252, 0.08902444448312417, 0.08931180614779506},{0.11230664173828982, 0.15575850227041163, 0.19531353709058258, 0.1138292243995822, 0.24714308997706413, 0.09663502838643949, 0.14263039911962908, 0.22780136924731478, 0.11446960769817717, 0.1070205349218623, 0.17034146830756283, 0.16508144601553182, 0.16559041903203808, 0.16016682269142413, 0.10900119169798415, 0.16879460286511952, 0.12103544080709751, 0.11365822908107816, 0.20841065110082196, 0.15706931108767935, 0.1138292243995822, 0.24860576440798104, 0.13916489737023313, 0.25954109516128965, 0.13223343008181146, 0.22461814937116906, 0.24638498604114065, 0.16991183380841418, 0.16212297211338325, 0.2028213042940445, 0.18470777530667631, 0.21666921739750328, 0.16229399495157237, 0.22253822516292557, 0.16225612934600012, 0.17292396762472617, 0.121748149686301, 0.1764687564241504, 0.2098726142500811, 0.15641070150117184, 0.14290794733775136, 0.14520047244239212},{0.12229278495940776, 0.17345449659646553, 0.16225364196675193, 0.12414872589557531, 0.19779464630744692, 0.10358979122931015, 0.15984589588798354, 0.18458049096955506, 0.12488584136706614, 0.11599668973683473, 0.19771003207299379, 0.18973394955515674, 0.18891435592553715, 0.18049098382918474, 0.1182839189737821, 0.19008960834032448, 0.1329078191881439, 0.12407567264739248, 0.17150942834978736, 0.17947841180102325, 0.12414872589557531, 0.2000018971624923, 0.15580795469935427, 0.2063012725073025, 0.14666596655249178, 0.18247981045757333, 0.20611335890746063, 0.19586605764526602, 0.18049530678021386, 0.2444624096907135, 0.21269700344302434, 0.17707199812462754, 0.18671042333404111, 0.18146315883611405, 0.18664956186405504, 0.2008262997893498, 0.1339810637085744, 0.2057527714864818, 0.25507839343477956, 0.1781103437912225, 0.1595418220359928, 0.1636912161411676},{0.09909026731327514, 0.13837731359395677, 0.17705181288447056, 0.10044561442002098, 0.22639252018491862, 0.08514240236019507, 0.1262421954738034, 0.20755947544826042, 0.10102589173842583, 0.09435893009555599, 0.1509196411986217, 0.14635099233316534, 0.14699398980788042, 0.1422320665713396, 0.09614897674302086, 0.15016347091221038, 0.10688724949068533, 0.10025347932057486, 0.18944164305220132, 0.13906229651761326, 0.10044561442002098, 0.22810626889186553, 0.1230700490261001, 0.23847612455609035, 0.11692651340434036, 0.20442004305207936, 0.2262035102058405, 0.15075516860886143, 0.14421146348224534, 0.18007789862355203, 0.1644472169832996, 0.19715263082079862, 0.14369392127335578, 0.20293445104433436, 0.14366316109943383, 0.1533420055883722, 0.10747844817914559, 0.1565293273746854, 0.18642488273346589, 0.13856250917220717, 0.12657668857770848, 0.1284554168413149},{0.14755877709151538, 0.23578418085871428, 0.18844718235025204, 0.14963982562676278, 0.22649474698583136, 0.12515977496878083, 0.1950715870885443, 0.20517879654185878, 0.15114535400459725, 0.13854797667215998, 0.22146496714858904, 0.22488299934060602, 0.23748643036318043, 0.2364382385156445, 0.14304003662162015, 0.2597235353054364, 0.16089728099577516, 0.14684212492336948, 0.19921625213941313, 0.20751581240016956, 0.14963982562676278, 0.23968621159631967, 0.18569816208063142, 0.23887968764237538, 0.17930789576343603, 0.2007527453772736, 0.28586928175995385, 0.23562511843880837, 0.25211567108812, 0.25612022067304024, 0.2800310601129722, 0.20171639238908734, 0.21080737632058832, 0.21238225661891144, 0.21097672673275694, 0.23170089494661142, 0.1590738003907059, 0.2363477122027542, 0.26303808623859426, 0.21259429778184286, 0.20070314296997646, 0.19308087056806944},{0.10302189386116647, 0.15370726858264733, 0.17291330158595825, 0.10444135431501002, 0.21999907745134167, 0.08805303143841983, 0.1335203933656494, 0.19556645404283243, 0.10526983100973253, 0.09743448827918456, 0.15563972924751288, 0.15435447418929749, 0.15890590237873398, 0.15596614043480192, 0.09994080365125822, 0.16790846443753682, 0.11167605593648457, 0.10334134949253995, 0.18534949989788493, 0.1445348829216456, 0.10444135431501002, 0.23210527756581484, 0.12863007473111518, 0.23504428552931939, 0.12324694608753507, 0.19078246702316637, 0.26431383642565365, 0.1603575614439322, 0.16223028098403297, 0.18341674881872488, 0.18245052250390134, 0.1897527557925951, 0.14811711127807448, 0.20041448172074727, 0.14815969661396325, 0.16045240444179176, 0.11132392801117148, 0.1637643077884745, 0.18931778280081002, 0.14600831747028287, 0.13563180451986098, 0.13398559004453253},{0.2336487164985252, 0.30133480379126165, 0.33404046023109246, 0.23649298220503737, 0.3927584758379591, 0.20433398032597977, 0.2864443043735707, 0.37589993498515223, 0.23742693640091395, 0.22445986718963745, 0.337985397377733, 0.3254558280017111, 0.32223519644227266, 0.310843112536383, 0.2274463932379119, 0.3218538476563026, 0.24927515587942675, 0.23722383746572517, 0.34944299663536604, 0.31420048803502104, 0.23649298220503737, 0.3902205574012018, 0.2820574854400048, 0.4039941592462282, 0.26846189425215045, 0.3737822774191474, 0.38225276998729263, 0.332097653358064, 0.3098587582484531, 0.39286346022343877, 0.3487742479325109, 0.36078279390491347, 0.324455911984357, 0.36464572296510894, 0.32431115934535937, 0.33985032881304583, 0.2517105201910165, 0.3457215978388557, 0.4043971847877982, 0.3109075177076333, 0.2849726890895935, 0.293027936641556},{0.133282465562566, 0.1940584604408331, 0.22159894759948567, 0.13505277419498307, 0.2784952504897373, 0.11456550583353378, 0.17066318727780208, 0.24989702252400758, 0.1360530713393051, 0.1263897992152817, 0.1980865624098317, 0.19602941355434017, 0.2009364455353981, 0.1970709032594366, 0.1294342666386105, 0.210856128701532, 0.14397906785057493, 0.13381114251465934, 0.23667754549440478, 0.184448777789785, 0.13505277419498307, 0.2915363056732719, 0.1649007526149039, 0.2959710850275085, 0.15812729734633046, 0.2443042938060511, 0.32355365258585755, 0.2030629681720074, 0.20394565804412468, 0.23172499523153975, 0.22828733477133722, 0.24238693731120314, 0.1889785851975947, 0.2546309819954501, 0.18901964264915153, 0.2035623701405269, 0.14368344348940937, 0.20754895878846327, 0.23882219389223347, 0.1859478659741811, 0.17298057199813616, 0.17150480156886913},{0.06887267966230404, 0.09958664973364695, 0.10614233658109802, 0.06992056324382356, 0.13433710178358058, 0.05827860078367447, 0.09039131642468032, 0.12337460231684147, 0.07036332963658037, 0.06525054181995286, 0.11135477278354679, 0.10730787547763442, 0.10753507487702045, 0.10317446603267554, 0.06660950138763458, 0.1094460928351526, 0.07492819410766814, 0.0697838739245665, 0.11329787108861845, 0.10117520187760796, 0.06992056324382356, 0.1361800848350895, 0.08787744771681259, 0.1414404859511983, 0.08285327103177431, 0.12158063155707406, 0.13977302774352646, 0.11102565811864452, 0.10414327269475054, 0.13759816387212084, 0.12222399013949536, 0.11757239156251928, 0.10512355501558927, 0.12116551335867407, 0.10509740858297631, 0.11342558832397036, 0.07541884903854253, 0.11622343592768883, 0.14355495643594818, 0.10067929690988492, 0.09051777658261267, 0.09230267172872153},{0.044868803301317386, 0.06548617938366587, 0.0794092911906296, 0.045535660675997396, 0.10412521768000099, 0.03806716947349663, 0.05869665760179014, 0.09380306595730759, 0.04583902807615037, 0.04250194685617696, 0.07139324875743948, 0.06924525329573172, 0.06987114019719554, 0.06744668926176604, 0.04342692586060052, 0.07189734528928793, 0.048765136464905705, 0.045366772090707636, 0.08555074002336917, 0.06518972777417675, 0.045535660675997396, 0.1062335119426594, 0.05694416434293318, 0.11082400550310963, 0.053892250606079245, 0.09203434570792568, 0.10907142551714745, 0.07172068863754441, 0.06870575458813744, 0.0872713107177854, 0.07972767125827834, 0.08905171238171615, 0.06752815378817068, 0.09251007207089568, 0.06751879584422919, 0.0729081732927711, 0.048981510068894486, 0.07463825264184873, 0.09082851992167137, 0.06509226785394236, 0.0589917644695353, 0.05969493258367398},{0.11121475021982863, 0.1550699767148648, 0.1896918949710901, 0.11273872666555951, 0.2396898519081085, 0.09554150038174426, 0.1417145180937313, 0.22068623521629027, 0.11338731353440959, 0.10590409134436585, 0.16956139502271567, 0.16436151521263886, 0.1649687723406094, 0.15951332035024768, 0.10790777131885333, 0.16827745685205706, 0.11997387755213694, 0.11253391128083319, 0.20236349123812566, 0.15619432192947405, 0.11273872666555951, 0.24171111445947563, 0.13818009619256813, 0.251853149871007, 0.1312435503181516, 0.2175281332307545, 0.24158273556512946, 0.16928725119423751, 0.1615169574587357, 0.20243840280806297, 0.18442899577330368, 0.21017004779351778, 0.16142302003186998, 0.21611582145242508, 0.16138778066481405, 0.1722599755776819, 0.12065461117702612, 0.17585068674607948, 0.20959877006655933, 0.15559523511368437, 0.1420352941663811, 0.1442458710224092},{0.11854708662121877, 0.16037108381516163, 0.1986046924790641, 0.12015045760736429, 0.24684202902262314, 0.1021921817112173, 0.14954606507225232, 0.23186982548527094, 0.1207285269078527, 0.11325711919113055, 0.18010153821992889, 0.17312679181158688, 0.17209978873592502, 0.16564941438560157, 0.1150657540783236, 0.173322183591227, 0.1275238138209725, 0.12036554605348308, 0.21078784837358475, 0.16568605698636663, 0.12015045760736429, 0.24482964362477422, 0.14657282544329875, 0.25680152775256254, 0.13884771783697117, 0.2298204187049463, 0.23641316146482194, 0.17759259050941442, 0.16615363290534688, 0.21494410433763741, 0.19002765584432374, 0.21972891525332788, 0.1716945822626071, 0.22322151254902475, 0.17162217582288905, 0.18180922216797543, 0.12869621239437287, 0.18550639029015284, 0.22251872124867514, 0.16415041885077247, 0.14911378493075567, 0.15302398396540876},{0.12712484984457098, 0.1760470661108254, 0.21383179772880065, 0.12883631343308463, 0.26801761046645084, 0.10947608933950798, 0.16122341951610775, 0.24751563214856176, 0.12956450295627328, 0.12115422650950165, 0.19207507326382647, 0.186335212319969, 0.18700471304340377, 0.18097048100316093, 0.12340823865559285, 0.19065167169572983, 0.1369506274475941, 0.12860589758887606, 0.22764847866676896, 0.17729898439689223, 0.12883631343308463, 0.27021199141349156, 0.1572884560526437, 0.2810757011583034, 0.14955332316628486, 0.24409645371069968, 0.2701702538779561, 0.19177366118149294, 0.18318075237289058, 0.22815991659611418, 0.2084350330703166, 0.23612711428458047, 0.18308564976536823, 0.2425827012485349, 0.1830467289050409, 0.1950519211755709, 0.13771282032961055, 0.19900766417196442, 0.23597061920103377, 0.17663571247809506, 0.16157958714559698, 0.1640389043612289},{0.0693779500213633, 0.0963649016003213, 0.10010105206990452, 0.07044872798093564, 0.12399078131103626, 0.05872983781160489, 0.09039743271824761, 0.11649302044108287, 0.07080002145552998, 0.0659645774978534, 0.11376401064172742, 0.10775767494109816, 0.10607633518246236, 0.10074016095360723, 0.06706663969591531, 0.10547606359794072, 0.0753418486444477, 0.07072296920980346, 0.10614954217309915, 0.10262850315076368, 0.07044872798093564, 0.1235352131067328, 0.08858632135137658, 0.12909462449158582, 0.08294656704590864, 0.11552446588765371, 0.12230465751783869, 0.11082646913999976, 0.0999491609613184, 0.14222706624357276, 0.11838999977462751, 0.11052164087684326, 0.1073510967191446, 0.11238461382862071, 0.10728371887823103, 0.11463181606395818, 0.07629831248304704, 0.1174945095459777, 0.14876486113167092, 0.10109834861045112, 0.0896992527561534, 0.09325685566795702},{0.06970444839484832, 0.09996246888272721, 0.11535580309821203, 0.07073194420184817, 0.14756495962869257, 0.05925458529293201, 0.09068102728649362, 0.13499951421321774, 0.07117138100664919, 0.06613301991234308, 0.1105806419265322, 0.10683522934291172, 0.10723517902758342, 0.10323216244350664, 0.06748202154775444, 0.10945484530321078, 0.0756418701028117, 0.07058187489291567, 0.1234608540124947, 0.10093925629175048, 0.07073194420184817, 0.1494193273982011, 0.08820512690668086, 0.1557057386053496, 0.08338256144034367, 0.1329256674581002, 0.15172805914951276, 0.11041173108718724, 0.10449795253473147, 0.1350737571233286, 0.12141674387918935, 0.12835666833614554, 0.10467652906393665, 0.13238963054658073, 0.1046526268267146, 0.11258423779825454, 0.07609765032328618, 0.11522064197450191, 0.14055724444815818, 0.10052282124715767, 0.09088618958801693, 0.09245844992722602},{0.07843988711679134, 0.12569105687502838, 0.10950299873957667, 0.07964075893310735, 0.13660453168870296, 0.06589892560152681, 0.10555989143786912, 0.12236976863752744, 0.08039690463413703, 0.07359092191711622, 0.12460949651251646, 0.12461691627259462, 0.1300232017885056, 0.1276435762031511, 0.07584463207011763, 0.13986062044310135, 0.08593655911968705, 0.07847735791961484, 0.11681614837292452, 0.11483613247547317, 0.07964075893310735, 0.14431604487786284, 0.10076364111363777, 0.14526584968969752, 0.09627265289913979, 0.1195704139416764, 0.16957047063685307, 0.13070496076712795, 0.13421595865384411, 0.14986533472631172, 0.15445783860469495, 0.11917626306724478, 0.11768018009648228, 0.1256885122553089, 0.11774570825997026, 0.1299291500791689, 0.08538257545406369, 0.1330478674051663, 0.15527389331453034, 0.11681660930876589, 0.10788227286773666, 0.10546252790595868},{0.1753067720871572, 0.23713951640511402, 0.2888593979846328, 0.1775167388218801, 0.3545901683318776, 0.1522996892176593, 0.21864128286263046, 0.3301991142881779, 0.178454917135538, 0.1675725201292823, 0.25664802845001383, 0.24964628664968597, 0.2504848428343181, 0.2431428959040053, 0.17049471723732626, 0.2550240500045588, 0.18794198164017328, 0.1772271501201448, 0.30587032027893496, 0.23858270474304225, 0.1775167388218801, 0.35684196046274824, 0.21371411515368732, 0.3699056368454335, 0.20397207717659238, 0.32609223807799465, 0.35527558316827307, 0.25626534155773684, 0.24594971387078415, 0.29970913524099835, 0.2764058344521014, 0.3163041590421831, 0.2456953008400471, 0.32400232218474717, 0.2456468249392437, 0.26023750556414316, 0.18892246991625433, 0.26501387191329345, 0.3088396506536146, 0.23775917286526643, 0.21909825783986567, 0.22215706481989614},{0.03187722655999541, 0.05125376798227966, 0.048817418312629264, 0.032378612367126594, 0.06282731965985104, 0.026690658947806686, 0.0431669412687406, 0.05552102588045596, 0.03268019957752775, 0.02989760383322116, 0.05168503140511513, 0.051377185418442425, 0.053393200432035756, 0.05220741832868075, 0.030795341730874427, 0.05722127891312744, 0.03498226584031784, 0.03195221268791537, 0.05249170224387148, 0.047333404042595326, 0.032378612367126594, 0.06662912258565443, 0.04124301455564576, 0.06739710159405887, 0.03926346587883909, 0.05411805083484302, 0.07854831856579236, 0.05390259871665584, 0.054761374524932745, 0.06313634328409319, 0.06361763303729791, 0.05378152336927142, 0.04867041395234033, 0.056988483505951135, 0.048692305892823105, 0.05380034279245585, 0.034815857327766014, 0.05516832998055745, 0.06565774312872692, 0.04802070318173125, 0.04402901860618857, 0.04326653598529333},{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},{0.02226968119616343, 0.03479181816793924, 0.03530598764754193, 0.02262417683967995, 0.04597266488915098, 0.018650893777505024, 0.03004770677616072, 0.04085536282800338, 0.022813269489684294, 0.02093864875573854, 0.03667191349639762, 0.03597874038292165, 0.03688318591199472, 0.035732068012051525, 0.021505509762770002, 0.03876905450755193, 0.02441324540904852, 0.022419396279752743, 0.038029589775689585, 0.033346236797746544, 0.02262417683967995, 0.04806385223841021, 0.02886766615864826, 0.049240612145220755, 0.027329289825941683, 0.03991684106436939, 0.05375650881047433, 0.03761161268517763, 0.03692928857204462, 0.045501211606032294, 0.04343928546456262, 0.039231403636344496, 0.03447481226185918, 0.04127391223364117, 0.034481202631445246, 0.03790605846193797, 0.024404224891044782, 0.03890680280600908, 0.04750117044239162, 0.033582071746310255, 0.030436282908004993, 0.030350632680763143},{0.15812278104529268, 0.2148859883742806, 0.26490128178421707, 0.16015410708544978, 0.3276154732411269, 0.1370526162492316, 0.19802303932001428, 0.30463803222213565, 0.16100475840933648, 0.15105655963831663, 0.23360120394113168, 0.22688251530421832, 0.22748597465103781, 0.22054961769925327, 0.15370304777445437, 0.231496062179986, 0.16972334954992177, 0.15993791055955292, 0.28101542538793456, 0.216678242708774, 0.16015410708544978, 0.329223668024999, 0.1935351839500852, 0.3421528785839685, 0.18446477570953476, 0.300831162364941, 0.3263217695917775, 0.23299869108767246, 0.22300481358687235, 0.27416705391429336, 0.25153559356931215, 0.29112417451589045, 0.2233737480010229, 0.2981684945247975, 0.22332450865286765, 0.23683963326663854, 0.17067941062676073, 0.2413109200966474, 0.282821045930264, 0.2158097155989531, 0.19836269524212394, 0.2013788858777237},{0.07722995273187645, 0.12300510035690684, 0.11053549724600518, 0.07840147947584768, 0.13841935074300185, 0.064982434940904, 0.10357668571674172, 0.12373105318322127, 0.07913546952633815, 0.0725069119663909, 0.12212403123301155, 0.12203021909184486, 0.12717640716178996, 0.12487111049192848, 0.07469710976946918, 0.13662575957101344, 0.08453036369597362, 0.07728303972522549, 0.11803903149211728, 0.11262135396778321, 0.07840147947584768, 0.14637935013574963, 0.09895065722815374, 0.14737712049750304, 0.0945697547074749, 0.12084309187579453, 0.17215756248874176, 0.1278776174517395, 0.13122919058503363, 0.1466294524798458, 0.1506009307929257, 0.1204610299436399, 0.11541379595037761, 0.12716203691502723, 0.11547495743539613, 0.12719663387449234, 0.08400813618242335, 0.13020981680219954, 0.1518791537287066, 0.11448996950960826, 0.10580583615277041, 0.10351836466918579},{0.10114234718671275, 0.14128246523146398, 0.17710123105913544, 0.10253315018990627, 0.2254981421765222, 0.08684769200773775, 0.12900006721285143, 0.20712923248411133, 0.10312450165129755, 0.0962996901450163, 0.15449277153475124, 0.14971863434009167, 0.15028906845487033, 0.14531805224398758, 0.09812480516056118, 0.1533852638604233, 0.1091366705510112, 0.10235092273921607, 0.18928939766240047, 0.14224792946748482, 0.10253315018990627, 0.2272087561525546, 0.12576922912314, 0.23729319268690716, 0.11942973845160798, 0.2040854253186991, 0.22596254823800507, 0.1542304679180431, 0.14721698757106252, 0.184653426855376, 0.1681591359267337, 0.19688152018496957, 0.14704112476366155, 0.20253349220979452, 0.14700831332437003, 0.15695335767646598, 0.1097615164900459, 0.1602428513817201, 0.19123165298470393, 0.14169511533562335, 0.12930087249171837, 0.13131567776541825},{0.09728884978254444, 0.1356018957736682, 0.17414698336916756, 0.09862135979128496, 0.2226802916084781, 0.0835923875031633, 0.12391521169662073, 0.2044758160616428, 0.09918360046874385, 0.0926615666225601, 0.14833182201611356, 0.14370663314774546, 0.1442042142416626, 0.1394512581730952, 0.09439729570616857, 0.14713949064249873, 0.10493681642182967, 0.09846658181845355, 0.18631361324149595, 0.13661567193221877, 0.09862135979128496, 0.2239297933413077, 0.12085201968512967, 0.23439726315270715, 0.11477091201588957, 0.20148162963284932, 0.2210664776455539, 0.14799060582553694, 0.14126663323110125, 0.17713055886662699, 0.16120631849671935, 0.19403630219408724, 0.14122062751204817, 0.19949277867299312, 0.1411874989316016, 0.15062997572235898, 0.10555457314593625, 0.15376720938848157, 0.1834053349425206, 0.13605047634355139, 0.12418213265561648, 0.12615997879176766},{0.11085423863270796, 0.16423119489458438, 0.17715052278555554, 0.1124082823267754, 0.22336210255786113, 0.09459752473505013, 0.14395800807881612, 0.20076354497076873, 0.11326600478056363, 0.10488237323215763, 0.1693980425606618, 0.16721131536225584, 0.1713043865578557, 0.16738057745125567, 0.10748409904059936, 0.17962459058641875, 0.12023186236073374, 0.11139544264632911, 0.18930694641809162, 0.15674350356453226, 0.1124082823267754, 0.23313117007463227, 0.13891518826251642, 0.2373101448195996, 0.13272017022212143, 0.196436949857324, 0.258204835876175, 0.17359801889700094, 0.1729666153644267, 0.20116250180940579, 0.19631260252323615, 0.19422677564363267, 0.16099010656680543, 0.20368296693326682, 0.1610229882302355, 0.17431626200917905, 0.12006013366261163, 0.17803721281729076, 0.20798318710292704, 0.15793899796044203, 0.1458375396219389, 0.14490720334909604},{0.029641789848350857, 0.04564691153948069, 0.04945813119525433, 0.030099726397742325, 0.06482769323232648, 0.024943232134935715, 0.03959288700835644, 0.057409087065372406, 0.030343623252118156, 0.027920042504420484, 0.04793005537378462, 0.04704599439129101, 0.048186063075762994, 0.04678065826039678, 0.028653208072638065, 0.0506106490358391, 0.032403980939888596, 0.02983816013891929, 0.05336322247073411, 0.04375782165908813, 0.030099726397742325, 0.06782781564898055, 0.03809574176098965, 0.06957359306293116, 0.03613795951613803, 0.05604354212846533, 0.07546753741896442, 0.04907833079478169, 0.04835877111228803, 0.05885403421881554, 0.05632000479440401, 0.05508750334532677, 0.04518368038848218, 0.058029242639155605, 0.04519100360009998, 0.049448769152774213, 0.032394288661019024, 0.050690218288992346, 0.061301014246221294, 0.04404745586647774, 0.040093910630167345, 0.03997720820825562},{0.09820467633335148, 0.1533851642517808, 0.1386518187244678, 0.09967125193337598, 0.17234867977830626, 0.08288446165216312, 0.13074782450733918, 0.15509190806731288, 0.10055974623708665, 0.09236849338279643, 0.15428098790494965, 0.15364248053902185, 0.15931538157031883, 0.15606558808245435, 0.09503208904331503, 0.169754678279059, 0.10726676761234945, 0.09838828894349748, 0.14771906034361304, 0.1423308721593512, 0.09967125193337598, 0.18116229443943205, 0.1252376965108339, 0.18285335436377875, 0.11963010215500955, 0.15172113007546326, 0.20877476853544763, 0.16063164446894287, 0.16297988316215734, 0.18489865167125627, 0.18702501786347148, 0.15086171757527145, 0.1459678841852572, 0.15859822802215875, 0.14603349668562526, 0.16021787191158182, 0.10674724060894991, 0.1639414875404866, 0.19146103976785928, 0.14434499792024788, 0.1332222065826915, 0.13095606968849585},{0.06792841064092796, 0.1100905222484645, 0.09410518826813584, 0.06898505893747939, 0.11764270962847025, 0.05691635063430925, 0.09195765486477768, 0.10523804024388927, 0.06965505353383666, 0.06365442784933646, 0.1088478976084906, 0.10895386614088702, 0.11390274626804768, 0.1118126160324455, 0.06564649565268756, 0.12288500924966934, 0.0745428486313049, 0.06794295015685685, 0.10045104814420916, 0.10015675999711289, 0.06898505893747939, 0.12442477223076596, 0.08766160622103594, 0.12520349562657326, 0.08370338878719781, 0.1028012954681816, 0.14692951833727144, 0.11444880862434544, 0.11779762422921435, 0.13144105607005183, 0.13609023089669992, 0.10248280540564182, 0.10265882290061831, 0.10816816272830419, 0.1027193731972827, 0.1136779819247204, 0.07403367929230996, 0.11647469867573705, 0.13629506654627782, 0.10197613030688345, 0.09406221504423014, 0.0918271905723125},{0.12900964750158872, 0.1782300105581192, 0.21898540861037508, 0.13073427534519166, 0.27457517141425203, 0.11120735506538239, 0.16330853913359208, 0.25361571953226103, 0.13146751885909613, 0.12299277442647671, 0.19424056457286956, 0.18848587337021436, 0.18916706934444744, 0.1831408597466185, 0.12526334111126888, 0.19286725383443845, 0.13890573993033944, 0.13050566038185826, 0.23315082898491185, 0.17943721006915417, 0.13073427534519166, 0.27664842289441677, 0.15935701316608317, 0.28791564724033003, 0.15158388698163236, 0.2501198080926122, 0.275834161919616, 0.19393074099000374, 0.18540345714151343, 0.23029247028377703, 0.2106291719162167, 0.24188651282107484, 0.18524086261694003, 0.24843924287680919, 0.18520146730532475, 0.19721069240770434, 0.1396754731256272, 0.2011669197098209, 0.23807836721452047, 0.17876902322134142, 0.16367184320175765, 0.16613568978308974},{0.07665094509070623, 0.11716289499823783, 0.11835877881990894, 0.07779462873364662, 0.15033718178022243, 0.06479811351145881, 0.10150849041742306, 0.13462717862016377, 0.07843209922995867, 0.07225740753348305, 0.12108225929264659, 0.11950878020426227, 0.12280136138448135, 0.11969342749567813, 0.0741775899743349, 0.12934289784084113, 0.08359520525441767, 0.07702179566628486, 0.1267317211119692, 0.11127208320442322, 0.07779462873364662, 0.15733355154642167, 0.09763050426998875, 0.16011924220104032, 0.09296701394142164, 0.13164957033078456, 0.1768258298567892, 0.12457750578317844, 0.12398471812474911, 0.146317728766908, 0.14287096394504709, 0.1301061841962204, 0.11451170260360918, 0.13669522505658876, 0.1145409272653659, 0.12506103008872282, 0.08344077065068795, 0.1280076973569587, 0.15183889354016672, 0.11226720742719419, 0.10296599124909687, 0.10218599808085438},{0.07037675900946251, 0.10575862560841297, 0.12768273344531675, 0.07136204662535957, 0.16687685502963256, 0.06002096704406102, 0.09160300481335676, 0.14624148701567735, 0.07193276921482837, 0.06651706693724864, 0.10727269983043447, 0.10625659484655871, 0.10940061549246953, 0.10732361708268338, 0.06823966652864172, 0.11576168111493344, 0.07638061820699726, 0.07062060381154518, 0.13782823884159254, 0.09939621213222287, 0.07136204662535957, 0.17716575842357024, 0.08821095149233243, 0.17983936603510145, 0.08442693850506203, 0.1422447279267207, 0.20314410596054389, 0.11046483683792749, 0.11178845731972113, 0.12712023316293347, 0.12602871694037943, 0.1414593352593511, 0.10196162924901798, 0.15029880288608982, 0.10198898173282639, 0.1105998729462668, 0.07615777557370951, 0.11294563761681836, 0.13137379331370894, 0.10037921384474827, 0.09306044775977991, 0.09196951317109187},{0.19864380484275998, 0.262370592980456, 0.3261721321716994, 0.20104782696816714, 0.3949553151569531, 0.1736028393480572, 0.24467956982499683, 0.3721388224516555, 0.20199131571724616, 0.19043830326258124, 0.2859863335323521, 0.2775724339987982, 0.27738228384755925, 0.26913475948577564, 0.19340090970895465, 0.2807973484058572, 0.21218965873574455, 0.2010529721932457, 0.3439973630015144, 0.26659318705425655, 0.20104782696816714, 0.393988011631031, 0.2399075597487896, 0.4094602156175925, 0.2291327444557763, 0.3685910179858357, 0.384442643248744, 0.2841170978372005, 0.27114006671941565, 0.33131695467071576, 0.3031963084383783, 0.3560631208576443, 0.2744951207573404, 0.3622990315457117, 0.2744195826755442, 0.28902734665174873, 0.21358267245106916, 0.2940159166474831, 0.340833433891119, 0.2651048773181849, 0.24465194373310567, 0.24900479547249324},{0.19755009303360738, 0.2517880317105864, 0.3224917341215121, 0.19989072718317655, 0.3829317120548252, 0.17345826807733372, 0.2402225709171729, 0.3699332977168615, 0.2005903424735316, 0.1902029043651297, 0.2826478775015915, 0.2717680197265516, 0.26867595947794826, 0.25941826328533624, 0.19244028034827357, 0.26827913780294077, 0.21024434043815496, 0.20081351418081192, 0.3380260659306102, 0.263225330450701, 0.19989072718317655, 0.37457749570786986, 0.23700773691480786, 0.39235358149706384, 0.22568595281744655, 0.3690572044574553, 0.35191575960342697, 0.2768665994998833, 0.258733009006734, 0.3267103852864314, 0.2897237082085186, 0.3516278492289314, 0.2718322356530792, 0.352389092148573, 0.27169250661004696, 0.28354344759374334, 0.21254226469996726, 0.2882328499958166, 0.3358852255639454, 0.26009945859171496, 0.23876348173910322, 0.24598379129807463},{0.10898378063178117, 0.15651260563383132, 0.16781714167391867, 0.11055519309019228, 0.2100302422914685, 0.09287095222659435, 0.14129709597656, 0.1926180159351201, 0.11127236753370484, 0.10338092413902546, 0.1703811750374253, 0.16556833268695845, 0.1669060767876588, 0.16121083248335225, 0.1055813399848815, 0.17108376764492012, 0.11815136700366134, 0.11013290473487614, 0.17870313140318028, 0.15624838482889084, 0.11055519309019228, 0.21421240909682898, 0.1372349254002094, 0.22105302886194972, 0.1301375922849325, 0.18959135634413424, 0.22298738766364234, 0.1712068619433434, 0.16365924228527728, 0.2060158605434053, 0.18899062083740978, 0.18463909248446325, 0.16155889720439048, 0.19083661005878966, 0.1615410460410835, 0.17390352167435053, 0.11864206832599804, 0.1778315395214544, 0.2138852396505408, 0.15605421230811475, 0.1419306300786519, 0.1436025438892191},{0.06255390607807029, 0.09698028144791344, 0.09141458003745236, 0.06353096075080011, 0.11574617401994111, 0.05253070473548532, 0.08394968691828308, 0.10412662492515426, 0.06406140311350815, 0.058851555178371026, 0.1016436983218879, 0.10000084342934665, 0.10260094235862108, 0.09953163934857331, 0.06044562298174771, 0.10776349040711591, 0.06847435604220353, 0.06292347219526047, 0.09777229148874696, 0.09277372373667651, 0.06353096075080011, 0.12065178164199551, 0.0806647908472967, 0.12301660455561089, 0.07651058859615813, 0.10196350747247793, 0.1348040661479843, 0.10446431960060902, 0.10276223782708285, 0.12490675111460031, 0.12033737287256668, 0.1004786214680515, 0.09573659732629916, 0.10526527958000434, 0.09575901635151834, 0.1051091642053975, 0.06840444533604269, 0.10778862263417444, 0.13009756173166045, 0.0935225971661195, 0.08506706616838772, 0.08468669261964515},{0.170461128409018, 0.2649274535170137, 0.22031372558649048, 0.17280091877439402, 0.2639596851911649, 0.1452905087753778, 0.2229153691286485, 0.24004662517777542, 0.17442748897356913, 0.16049384064121047, 0.25341817282604234, 0.2560731215455552, 0.26852428271371614, 0.26647273636448143, 0.1653761772361406, 0.2903839301920013, 0.1852883493858344, 0.16991160062538335, 0.23262598972256374, 0.2375354453219102, 0.17280091877439402, 0.278155838741777, 0.21299879321343487, 0.27786939195275223, 0.20553433833077783, 0.23510720211223024, 0.32620666523770353, 0.26745779953439325, 0.281721054489021, 0.2926173368911746, 0.31300583760459316, 0.23575940815920246, 0.24157564685052638, 0.24753320210264126, 0.24174166529019983, 0.26404405382614676, 0.18353380114141452, 0.2691982594079645, 0.3004867300435635, 0.24251781491868893, 0.22854031382058618, 0.22131105010745084},{0.10781491923530134, 0.15069894862285288, 0.1832130033050971, 0.10930225805991439, 0.2317069661373873, 0.09253366073177982, 0.1376337010496462, 0.21322586207823763, 0.10993555640982759, 0.10263295714820392, 0.16494961561209287, 0.15984593691221627, 0.16043658874650873, 0.1550710696606316, 0.10458837298797714, 0.16366091876603692, 0.11636760194604616, 0.10910057642578407, 0.19549810412984753, 0.15182696535933618, 0.10930225805991439, 0.23375930721799584, 0.134172625441892, 0.24354845823326557, 0.12738443364647237, 0.21015632423315603, 0.23402679955491798, 0.1646843913485654, 0.15701261902384533, 0.19731482254110597, 0.17955588067466252, 0.20304847329860345, 0.15695576391949154, 0.20884998498525573, 0.1569213794227731, 0.16760623222810192, 0.11703140630740008, 0.17113679525089498, 0.20438017406385628, 0.15124090323898992, 0.13794490934993558, 0.14011305510135252},{0.10955041683327835, 0.1529740621249335, 0.18617486880578793, 0.11105775798907185, 0.23529120614260934, 0.09405756906610122, 0.1397496644257864, 0.21658966997372495, 0.11169949029691734, 0.1042981781849251, 0.16737747170744896, 0.16221734771834473, 0.1628157771246217, 0.15739290108392054, 0.10628011127731922, 0.16608104129202006, 0.11821656030010905, 0.11085377347119701, 0.1986233952429609, 0.1541092660854793, 0.11105775798907185, 0.23734811663711952, 0.13624662894893114, 0.24726742446210556, 0.12937442710219868, 0.21348245430741467, 0.23753031759023033, 0.16710845248293316, 0.15936184942414053, 0.20006630916856297, 0.1821392148342761, 0.2062767464867267, 0.15929634603212642, 0.21214509703538495, 0.15926153135948634, 0.17006145001337664, 0.11888930924480443, 0.17362912888659257, 0.20719572951747176, 0.1535161513293814, 0.1400652939112891, 0.1422588056043453},{0.09455075339074726, 0.14072491815438412, 0.1273724580164324, 0.09603213173647869, 0.15758579888276794, 0.07954243139401937, 0.12588285074247033, 0.1448351237948258, 0.0967242845591308, 0.08924634144315678, 0.15504983952561102, 0.1504386797675169, 0.1518578028683742, 0.1458104832653593, 0.09135559338746774, 0.15563393646181506, 0.10327727355143883, 0.0955515322831558, 0.1352676782591261, 0.14071802907727235, 0.09603213173647869, 0.16141581438929783, 0.12178924365600809, 0.16563250635275173, 0.11489043984953615, 0.14261025169497718, 0.17221672987791506, 0.15634813121204197, 0.14771419191863625, 0.1926207951719309, 0.17486567581543833, 0.13933829108256965, 0.14596471785712253, 0.14413509832720425, 0.14595745542471847, 0.159000482615443, 0.10367146968648293, 0.16311701510510984, 0.20116856520022236, 0.14068595551354343, 0.1265107960143582, 0.12806844957892236},{0.13739263595785348, 0.18890162831479673, 0.1899324093431898, 0.13938173355487202, 0.23051053248843412, 0.11730384659173705, 0.17643674530691256, 0.2167559095326279, 0.14010091911535258, 0.1308309800620117, 0.21650217315779857, 0.20719980913747993, 0.20532060718637773, 0.19635331491570762, 0.13308663269908205, 0.20548013248253041, 0.14857565295184846, 0.1396054980601109, 0.20044175729355296, 0.19747505657531908, 0.13938173355487202, 0.2312347004768218, 0.17270624167202223, 0.23952632510629474, 0.16280664048705176, 0.2147425804234601, 0.2328469034035561, 0.2129849099781977, 0.19574602717915773, 0.2638959248665621, 0.2280525034290987, 0.2073860108594819, 0.20533471163069597, 0.21142179653824286, 0.20524368535781404, 0.21880197568415988, 0.1500327665584986, 0.22375266864786456, 0.2744683585421123, 0.1954101111659858, 0.17565731472234516, 0.18100552845584683},{0.18147472052132457, 0.23582970804150674, 0.2894072345844696, 0.18373098185829653, 0.3473401590012721, 0.1583154426326038, 0.22347542844501228, 0.3322203204347722, 0.18445838932802852, 0.17424698070366396, 0.2650577199597212, 0.25480996149557644, 0.2522923766451915, 0.24326974213372818, 0.17655854295679083, 0.2524361595403958, 0.19385730586481537, 0.18438962399317615, 0.30429229291816284, 0.24581946670790017, 0.18373098185829653, 0.3422653328241319, 0.2200018542685519, 0.3577155532879869, 0.20911027297881044, 0.3305822546054761, 0.3270097936947098, 0.2601676139265669, 0.24291244856554473, 0.30969218100658147, 0.27404818986505314, 0.3161949060569527, 0.25415526320226267, 0.31870077660092644, 0.25403279774705756, 0.26644893764706845, 0.19585713380918215, 0.27119468643555283, 0.3191266672037115, 0.24310219977781775, 0.22232500200811464, 0.22879701462584176},{0.0483568894430808, 0.07489596520924414, 0.07701059025373289, 0.04909664744924261, 0.09934427339799581, 0.04072394164298222, 0.06455273940290374, 0.08828797232338613, 0.04950838868724453, 0.045522836935377974, 0.07752313749838767, 0.07645298517641282, 0.07863335747932625, 0.07656751645315055, 0.04675896713898936, 0.08301097131675449, 0.052855230466461255, 0.0486008881818964, 0.08279065417432668, 0.07100166767807528, 0.04909664744924261, 0.10429579626274191, 0.06201335316582603, 0.10631009017337496, 0.05895733371220122, 0.0862086417847985, 0.11804072933892233, 0.07982342115021454, 0.0794431044959973, 0.09450300810607887, 0.09208971552606071, 0.08513701037065706, 0.073156384064238, 0.08972675000053372, 0.0731751822507998, 0.0801597294575119, 0.052759077867159054, 0.08212922453663121, 0.0982601964752603, 0.07164932528763446, 0.06550782703954988, 0.06500562065358097},{0.14669470794967135, 0.2022401194670545, 0.1922029808729793, 0.14885185698674852, 0.23159327581620556, 0.12496110413283781, 0.1891718755483781, 0.21803213650141712, 0.14963120514726003, 0.1395804318411733, 0.2332346062225025, 0.22294190990041746, 0.22065979436875321, 0.21061861183886985, 0.14202821840064705, 0.22028546842480917, 0.15883180626042295, 0.14908489713890768, 0.20247787322051894, 0.21228295286364837, 0.14885185698674852, 0.23278678794364466, 0.18513242052362988, 0.2404412166549888, 0.1743025881248354, 0.21602209016574644, 0.23634133069188978, 0.22925812186246286, 0.2094879361432796, 0.28580987447518763, 0.24526521831414633, 0.20910366022849577, 0.22092005736605, 0.213250395304063, 0.2208210366913666, 0.2357660113309641, 0.16041713127382026, 0.24123528540600736, 0.29761440567879316, 0.20998236711149412, 0.1882308141150289, 0.19421374415748863},{0.10273932041404613, 0.14373079096656236, 0.14193132281471968, 0.10429988199585963, 0.17407784548542465, 0.0870999833522639, 0.13376800775433845, 0.16303468193357265, 0.1048644815879622, 0.09760570886936991, 0.16654027431083815, 0.15884072833285526, 0.15724604669315032, 0.14985090892607766, 0.0993685005806257, 0.1572549441073958, 0.11154087513424166, 0.1044734782662527, 0.15019682674757362, 0.15086397084876843, 0.10429988199585963, 0.174787344847798, 0.13077370098148028, 0.18135865156592784, 0.12283851664131616, 0.1614199146504021, 0.17659756711884714, 0.16360468067443715, 0.14925148845830227, 0.20654292684152978, 0.17599870730692088, 0.1556467287281337, 0.1573119117589577, 0.15890091942789095, 0.15723726830060075, 0.16844813306941742, 0.1126931864842517, 0.17256940943055266, 0.2156578767388264, 0.14916847817963022, 0.13312048308820784, 0.13746585554029658},{0.06468119829008695, 0.09197161085575117, 0.11556284203487573, 0.06561127553007756, 0.14988947155135, 0.055187753457935904, 0.08353372963126925, 0.13666601487855584, 0.06600730454552134, 0.06145065400222713, 0.10120109807405353, 0.09786529709582714, 0.09825820383028883, 0.09478459087957546, 0.06266722186680457, 0.10039872402291403, 0.07004349802237919, 0.06548761036116649, 0.12409154945029206, 0.09266484837484276, 0.06561127553007756, 0.15123157007167823, 0.08132296774477264, 0.1584876180767635, 0.07700405001862189, 0.13449344299451535, 0.15077916757996399, 0.10102155337355102, 0.09608151649440819, 0.12263922387169299, 0.11082820622914373, 0.12942067821763278, 0.09599321198586781, 0.13346393520599828, 0.0959705709608437, 0.10293287841115098, 0.07046297883290593, 0.10524836480232515, 0.1273942038820065, 0.09228334504780164, 0.08373706882985098, 0.08512169187490795},{0.13095818233346432, 0.18405613115013877, 0.21310765854717859, 0.1327405946626924, 0.2664747823895046, 0.11252078011272369, 0.1670499848877648, 0.24470623807597225, 0.13355153751195883, 0.12459036392917917, 0.1985984479515701, 0.19338803157637982, 0.19491753727250544, 0.18894217026454246, 0.12708915268298726, 0.19978748153474557, 0.14131392993540487, 0.13228044371563277, 0.22685579287738988, 0.183364075379783, 0.1327405946626924, 0.27103753486045856, 0.16257053055378373, 0.2801735414366614, 0.15471733081579636, 0.24089332657455334, 0.27799475584911004, 0.19943097358973008, 0.19196868193455568, 0.23611080730703715, 0.21856917745573837, 0.23449324875848152, 0.1891366772296693, 0.24207617012404567, 0.18911465567933528, 0.20229695895495664, 0.14187674988226187, 0.20646830557136778, 0.2442329082752902, 0.18313631692527046, 0.1677974321488315, 0.16957646487450984},{0.08187348246375853, 0.1268654709681219, 0.1272777798815235, 0.08306807655779873, 0.16113971343540914, 0.06933950538923113, 0.10823158848475295, 0.14330070082219154, 0.08379542277740501, 0.07710408409627477, 0.12705483459039565, 0.12650045560570292, 0.13112258674389518, 0.12873424085718352, 0.07928655159127104, 0.13989018695381958, 0.08925070233437438, 0.08201724573304446, 0.1362989243626284, 0.11748750323285087, 0.08306807655779873, 0.17059060785242275, 0.10377203600570872, 0.17209718122934672, 0.09927750538989553, 0.13980199267303015, 0.19926949179351722, 0.13206253723937963, 0.13474324326032378, 0.15145515028830786, 0.15319931440447376, 0.1392947933577513, 0.1204215694728116, 0.14729584156754122, 0.12047186080996289, 0.13172419252375914, 0.08881741301612811, 0.13467701475946528, 0.15667690088847178, 0.11909621425995204, 0.11029637037082483, 0.10836828373292107},{0.1445201716330959, 0.19808180614597415, 0.24420551746424832, 0.1464103022174154, 0.3041621357545836, 0.12494704347856449, 0.18190757141025715, 0.2817161194478402, 0.14721320196158275, 0.13791927920037153, 0.21527162276168493, 0.20908375031951132, 0.20982455248044457, 0.2033555983779631, 0.1404106302148031, 0.21383860605305346, 0.15535052399179375, 0.14616279399992177, 0.2595551899944831, 0.19934530831431296, 0.1464103022174154, 0.30623354210339115, 0.17762187409368957, 0.31838039525704737, 0.16917449033540038, 0.2779604968998991, 0.3047248071275805, 0.2149323586351865, 0.20583029243748333, 0.2537369205946966, 0.23283389764769852, 0.2690303459045485, 0.20560129226859275, 0.2760416283315608, 0.2055585626127148, 0.21845012330415015, 0.15619357031700015, 0.22268803968700987, 0.26198543765526033, 0.19862198070261242, 0.18230592527423434, 0.18497120855492236},{0.042265552209145706, 0.06707579806506339, 0.07046977646832712, 0.042891409821229534, 0.09131247364670023, 0.03568264743452125, 0.05630329804708691, 0.07969197922787094, 0.043290954099827965, 0.03971909071855251, 0.06594336765362313, 0.06593025686852096, 0.06878189909646489, 0.06778787328260386, 0.040910897784431376, 0.07421707490791547, 0.046174901084441, 0.04227126903052561, 0.0759884000393118, 0.060978963518055304, 0.042891409821229534, 0.09820852397823296, 0.05381077043970525, 0.09854155019072243, 0.05153926771017467, 0.07740045980276615, 0.1204906715361088, 0.06900715838748593, 0.0716194542417038, 0.07871638010966203, 0.08115351740304295, 0.07757294842557709, 0.06243650860604202, 0.08292343332330875, 0.062468346763345145, 0.06859023755341591, 0.0458680249545983, 0.07015321133612752, 0.08145163066822839, 0.06199763282603723, 0.057576155166990675, 0.05620948847514694},{0.09930570014152154, 0.1456254746361782, 0.15643543212973243, 0.10073999657783002, 0.19758183835126755, 0.08449996150138227, 0.12941634425776408, 0.17911333008583882, 0.10145722782280123, 0.0940156257191457, 0.15487588439415192, 0.1515372302112644, 0.15395855351386753, 0.1493779858133113, 0.09620003650772492, 0.15956373088447512, 0.10781353871140584, 0.10010276050685328, 0.16708987556441235, 0.142358929175491, 0.10073999657783002, 0.2037199608741459, 0.12524109007366502, 0.20916487658526853, 0.11906704129636678, 0.17574380615263527, 0.21800657432652168, 0.1571241417093155, 0.15292529979370476, 0.18657818951675156, 0.1758765323853409, 0.17223016196003615, 0.14683271995197497, 0.17933351522273333, 0.14683856088780983, 0.15878524875065889, 0.10798446541291959, 0.1623693621750289, 0.19353165689882565, 0.14278014339662448, 0.13052494358561417, 0.13097335600356327},{0.11044803550503525, 0.1609171585439168, 0.1981493345653376, 0.11191814681880795, 0.25429114872728686, 0.09492232410568005, 0.14145261795282232, 0.22573817255663128, 0.11274221856238904, 0.10474690570709401, 0.16443048724309203, 0.16256210959458478, 0.1665640713143084, 0.16336204876646318, 0.10725280232451942, 0.17486217519369107, 0.11931758751932749, 0.11092075982797239, 0.21279278209284236, 0.1530043420811117, 0.11191814681880795, 0.2672064583575506, 0.13670515065093733, 0.2719706464217663, 0.13104592337465223, 0.2201819682289965, 0.29602472839035543, 0.16837670348418687, 0.16918709083106898, 0.19266688288013586, 0.18928300803326115, 0.2183981302513692, 0.15683926201455634, 0.2304114175352661, 0.1568694884671625, 0.16888415130191325, 0.1191046509097076, 0.1722081808021599, 0.1986478824649776, 0.15417603857054404, 0.1433547237850289, 0.14220820014425142},{0.10829980437019247, 0.15117370012543857, 0.18592711358353883, 0.1097861343921123, 0.2354454098261862, 0.09301521214915405, 0.13807166533194043, 0.2165751407192098, 0.11042007435316617, 0.10311719630776599, 0.16524199835032086, 0.1601832465774602, 0.16080492128666277, 0.15549477771606188, 0.10507472961214522, 0.1640874563504406, 0.11684644585104874, 0.10958135110687353, 0.1984581978826669, 0.15219325702620323, 0.1097861343921123, 0.2374586163323295, 0.1346114380961472, 0.2475294092340016, 0.12784889066935207, 0.21343536244883976, 0.2372266358149352, 0.16500436973592503, 0.1574922454066602, 0.19736158692579897, 0.17986135699300182, 0.20617539791996767, 0.1572927489263316, 0.21207603166402117, 0.15725871690679805, 0.16789130131708394, 0.11750470483643274, 0.17139944839039994, 0.2043605662680541, 0.15162056669360902, 0.1383980672535079, 0.14053052921728124},{0.08411665888631308, 0.13020597963263292, 0.12690019908922448, 0.08536234110107631, 0.16000448889511917, 0.07111487101046518, 0.11153643555347578, 0.14305094953462813, 0.0861003617444833, 0.07920521943589753, 0.13180513461032678, 0.1308961255988582, 0.13535026059431712, 0.1325025435772158, 0.08142119647715657, 0.14381207073685792, 0.0917725710773408, 0.08434479408508863, 0.13569716591796702, 0.12155013863116519, 0.08536234110107631, 0.16848538801243446, 0.10700210463799448, 0.17043499815135182, 0.10217109896308997, 0.1397620909816815, 0.19389268498617318, 0.1366625225895745, 0.13817492454007485, 0.15808060135902385, 0.15822147376693013, 0.13883968501562163, 0.12476299190362508, 0.14629901593516986, 0.12481033199426449, 0.1365743382982049, 0.09140920504621113, 0.13972340971276442, 0.16374832914146337, 0.12306120122778764, 0.1135048808201627, 0.11186887257206206},{0.10355846360269626, 0.1680918503108615, 0.13387875213320147, 0.10513255489438252, 0.16386625220405104, 0.08699449906747526, 0.13956073990411577, 0.14784739405740463, 0.10618236240780783, 0.09703269038638213, 0.16287758177845274, 0.16410674560412963, 0.17244337011614874, 0.17007663761841058, 0.1001541892552674, 0.1871659458777493, 0.11350874563346487, 0.10336765117542623, 0.1421381418347463, 0.1507846976065727, 0.10513255489438252, 0.17297892365038026, 0.13284588057525465, 0.17342914896698403, 0.12731208118484555, 0.14463695691464332, 0.20410374192935551, 0.17241463763494488, 0.17996495411276411, 0.19377906867279576, 0.20583903571722997, 0.14455188874559896, 0.15402110105846906, 0.15214993931697568, 0.15412998348702384, 0.17047025130536578, 0.11251494103858667, 0.17443674407147633, 0.20022408467682679, 0.15400282929727743, 0.14312464586935933, 0.13885553588265126},{0.09583129575318927, 0.13429996831658347, 0.1674989573186489, 0.09716052483378773, 0.21369113093297176, 0.08218720612643017, 0.12251620936133802, 0.19610032314106973, 0.09772598621501324, 0.09120453752429603, 0.14704271482664752, 0.14244485452347386, 0.14298987530273216, 0.13819415554221087, 0.09294842390480788, 0.14595275368268495, 0.10347635939476463, 0.09698482187059668, 0.17911733196095278, 0.13524942951219426, 0.09716052483378773, 0.21541317536407872, 0.11941486118843522, 0.22500654170202153, 0.11333470407758181, 0.19318849254799791, 0.21458728446998704, 0.14679346840930105, 0.1400017591612077, 0.17619616446611827, 0.16022295212155377, 0.18634067518132827, 0.13986141066170552, 0.1917674797048414, 0.13982999015132866, 0.14941966739480517, 0.10407324526850255, 0.15259404605335014, 0.18257425724056506, 0.1347189818372267, 0.12280261905873285, 0.12473962485713988},{0.09885350560727983, 0.1492950912384226, 0.16730362694605402, 0.10020468651956642, 0.2128327937971688, 0.0844973736889779, 0.12825294901543624, 0.1879006175488735, 0.10104286669774179, 0.09339127093054045, 0.1482544461135447, 0.1478064280826182, 0.15303327939030123, 0.15085831966845195, 0.09591892786011079, 0.16309104713647055, 0.10719460548113292, 0.09896179799011932, 0.17948377303126695, 0.13808999241556552, 0.10020468651956642, 0.22688460293165238, 0.12326645434660545, 0.22807867776729557, 0.11841631164569828, 0.1829190937873852, 0.2679062299163916, 0.15375986677189374, 0.15801587593253205, 0.17366417869043607, 0.176410627322306, 0.18311409709775672, 0.1411962102174367, 0.19454279239063285, 0.14125151058589963, 0.15324663262214486, 0.10664349320576062, 0.15634093194897558, 0.17900585872454855, 0.13992232800337828, 0.1306864869463862, 0.12826419859672195},{0.05675575958645628, 0.08843537971680664, 0.08852097969889355, 0.057618427536788634, 0.11337092147489226, 0.04781557526900743, 0.07576673207344758, 0.10079103923100081, 0.058115669548754384, 0.053400917411799545, 0.0904401557634693, 0.08952240811582349, 0.09240358948350454, 0.09020734928312785, 0.0548915560664263, 0.09801352984870612, 0.06203690290985969, 0.05697104660221019, 0.09502139629408798, 0.08302758945274823, 0.057618427536788634, 0.11941016479118409, 0.07268623746887938, 0.12122749542444042, 0.06922373386160464, 0.0983903782830387, 0.13700204860352969, 0.09354203759127194, 0.09393353514217564, 0.10967028392283625, 0.10845271925031957, 0.09748501112724135, 0.08540664638411102, 0.10286769436643563, 0.08543487315615106, 0.09368528283585152, 0.06184793172050024, 0.09595121254758392, 0.11388619139144501, 0.08395309175825925, 0.07702784751255337, 0.07613344146257969},{0.05812727028395673, 0.09327435489544314, 0.0877600085145072, 0.05900524088037457, 0.11128411054492554, 0.048916766872736356, 0.07797633943765143, 0.09847356411358354, 0.059569616896880645, 0.054547954381236816, 0.09156524518101904, 0.09169866679904681, 0.09585848433378248, 0.09439420728660025, 0.05622851732884569, 0.10359296752917287, 0.06362793226936485, 0.058114532688160705, 0.09407141600967556, 0.0845566030743814, 0.05900524088037457, 0.11865698083528549, 0.07440991872652443, 0.11913695438665646, 0.07121305255044424, 0.09593929279636056, 0.14299988726600438, 0.09614750344123692, 0.0997318059339197, 0.10965502655959587, 0.11378284864139192, 0.09594524515944748, 0.08657205628001376, 0.1018746879555436, 0.08662111832547147, 0.09545762091950824, 0.06317565505183884, 0.09769407667803232, 0.1135215546069716, 0.0860759676040839, 0.0797947778093775, 0.07780158899867372},{0.043613821116775704, 0.06977178305231839, 0.06995335035248652, 0.04426841712952077, 0.09000620829651206, 0.036741461773739784, 0.05837262850603361, 0.07891777664453638, 0.04468798886566544, 0.04094809876122717, 0.06851439659346899, 0.06855346601887577, 0.07161239319267709, 0.07055132575149066, 0.04219779534116576, 0.07739034886948955, 0.04771037180843987, 0.043611745410897615, 0.075285386317456, 0.06328386029205439, 0.04426841712952077, 0.09652351325059912, 0.05573292355805656, 0.09687287513984905, 0.05335028822089153, 0.07673043990230001, 0.11788288571900815, 0.07183489475347592, 0.07459015543596247, 0.08202157221422562, 0.08484451568429792, 0.07683543501306446, 0.06480440602590734, 0.08195022886100793, 0.0648393389660902, 0.0713584889374508, 0.04738055330348948, 0.07301742175254172, 0.08491748189085284, 0.06438584247859996, 0.05972298917318264, 0.058257066770359},{0.08243233590529037, 0.12420533652923008, 0.1334190144824126, 0.08362867908682327, 0.17035949626707453, 0.06998588913313508, 0.10817654702580033, 0.15217651785948094, 0.08429010017420487, 0.07784381951953193, 0.12830931161495882, 0.12658071986284117, 0.1298566176471211, 0.12672136188344807, 0.07984190377193186, 0.13651979319865168, 0.08967060441642033, 0.0828456585986367, 0.14304731721067748, 0.11825391293850247, 0.08362867908682327, 0.1783136006737902, 0.10421666585269791, 0.18169946150269672, 0.09937721376746661, 0.14872327171050412, 0.19912655878505814, 0.1316876976789564, 0.13117158718419739, 0.15390649178861765, 0.1500154921277911, 0.14695896881916215, 0.12161516873784235, 0.15451894480900955, 0.12164169081193525, 0.13225345394760857, 0.08953458710567978, 0.1352368892672459, 0.15946895850336906, 0.11920879923840551, 0.10965637374553379, 0.108917073803446},{0.06525038253664917, 0.10205682741157429, 0.09760161797595292, 0.06624830977501127, 0.12379667097761592, 0.054913338214476436, 0.08731575516654949, 0.11060327011941538, 0.06682698156918974, 0.06136056865931348, 0.10428045251411414, 0.10330790562039315, 0.10671933903438402, 0.10415424212954173, 0.0630944444375162, 0.11324613164218483, 0.07136997514772288, 0.06548269630287548, 0.10450503795038801, 0.09570283672005482, 0.06624830977501127, 0.13015004088253043, 0.08371448699540898, 0.13198461047544338, 0.07971382579373773, 0.10807953843027955, 0.14916594239397038, 0.10801671266516596, 0.10844152644615629, 0.12655759071700923, 0.1255028188040678, 0.1071060884352802, 0.09843064882202285, 0.11279812606690862, 0.09846577973186527, 0.10812451932464039, 0.07113423772014459, 0.11076228166936106, 0.1314358612676837, 0.0968241641784872, 0.0887964737167104, 0.08770936394730855}};



        //<UNCOMMENT> BELOW AND COMMENT BLOCK ABOVE TO USE A RANDOMLY GENERATED MATRIX
//		int numOfRows = readInput("How many rows for the matrix? ");
//		int numOfCols = readInput("How many columns for the matrix? ");
//		double[][] array = new double[numOfRows][numOfCols];
//		generateRandomArray(array, "random");	//All elements within [0,1].
        //</UNCOMMENT>

        if (array.length > array[0].length) {
            System.out.println("Array transposed (because rows>columns).\n");	//Cols must be >= Rows.
            array = transpose(array);
        }

        //<COMMENT> TO AVOID PRINTING THE MATRIX FOR WHICH THE ASSIGNMENT IS CALCULATED
//        System.out.println("\n(Printing out only 2 decimals)\n");
//        System.out.println("The matrix is:");
//        for (int i = 0; i < array.length; i++) {
//            for (int j = 0; j < array[i].length; j++) {
//                System.out.printf("%.2f\t", array[i][j]);
//            }
//            System.out.println();
//        }
        System.out.println();
        //</COMMENT>*/

        double startTime = System.nanoTime();
        int[][] assignment = new int[array.length][2];
        assignment = hgAlgorithm(array, sumType);	//Call Hungarian algorithm.
        double endTime = System.nanoTime();

        System.out.println("The winning assignment (" + sumType + " sum) is:\n");
        double sum = 0;
        for (int i = 0; i < assignment.length; i++) {
            //<COMMENT> to avoid printing the elements that make up the assignment
            System.out.printf("array(%d,%d) = %.2f\n", (assignment[i][0] + 1), (assignment[i][1] + 1),
                    array[assignment[i][0]][assignment[i][1]]);
            sum = sum + array[assignment[i][0]][assignment[i][1]];
            //</COMMENT>
        }

        System.out.printf("\nThe %s is: %.2f\n", sumType, sum);
        printTime((endTime - startTime) / 1000000000.0);

    }
}
